install.packages(c("car", "caret", "corrplot", "e1071", "randomForest", "ROCR", "skimr", "VIM"))
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse) # data wrangling
library(modelr) # factor manipulation
library(skimr) # data exploration
library(ggplot2) #visualization
library(corrplot) # visualisation
library(VIM) # missing values
#library(rsample)
#library(vip)
library(car) # modeling
library(glmnet) # logistic regression
library(caret) # CV
library(ROCR) # model validation
library(MASS) # model validation
library(randomForest) # modeling Random Forest
library(e1071) # modeling Random Forest tuning
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse) # data wrangling
library(modelr) # factor manipulation
library(skimr) # data exploration
library(ggplot2) #visualization
library(corrplot) # visualisation
library(VIM) # missing values
#library(rsample)
#library(vip)
library(car) # modeling
library(glmnet) # logistic regression
library(caret) # CV
library(ROCR) # model validation
library(MASS) # model validation
library(randomForest) # modeling Random Forest
library(e1071) # modeling Random Forest tuning
# dataframe
churn.df <- read.csv('https://raw.githubusercontent.com/jotsap/DS7331/master/data/churn.csv')
str(churn.df)
# dataframe
churn.df <- read.csv('https://raw.githubusercontent.com/jotsap/DS7331/master/data/churn.csv')
str(churn.df)
head(churn.df)
# CustomerID not necessary for analysis
churn.df %>% dplyr::select(-customerID)  -> churn.df
# alternate code: churn.df$customerID <- NULL
# make FACTOR flavor of SeniorCitizen column
# recode 1 as "Yes" and 0 as "No"
dplyr::recode_factor(
churn.df$SeniorCitizen,
`1` = "Yes", `0` = "No"
) -> churn.df$SeniorCitizen
# alternate code: churn.df <- churn.df %>% mutate(SeniorCitizen = factor(SeniorCitizen))
glimpse(churn.df)
skim(churn.df)
# Churn ratio
table(churn.df$Churn) %>% pie(., main = "Churn Comparison")
# Gender ratio
table(churn.df$gender) %>% pie(., main = "Gender Comparison")
# Senior ratio
table(churn.df$SeniorCitizen) %>% pie(., , main = "SeniorCitizen")
# from VIM package
aggr(churn.df,
prop = FALSE,
combined = TRUE,
numbers = TRUE,
sortVars = TRUE,
sortCombs = TRUE)
# we can see that 'TotalCharges' has 11 missing values
# VALIDATE COUNT OF NA VALUES FOR ABOVE ROWS
print("Total number of missing values for TotalCharges: ")
sum(is.na(churn.df$TotalCharges))
# list rows with missing values
churn.df[is.na(churn.df$TotalCharges), c('TotalCharges','tenure','MonthlyCharges')]
# list rows with tenure of 0
churn.df[churn.df$tenure == 0, c('TotalCharges','tenure','MonthlyCharges')]
churn.df$TotalCharges[churn.df$tenure == 0] <- churn.df$MonthlyCharges[churn.df$tenure == 0]
aggr(churn.df,
prop = FALSE,
combined = TRUE,
numbers = TRUE,
sortVars = TRUE,
sortCombs = TRUE)
# creating the 80 data partition
churn_split <- createDataPartition(churn.df$Churn, p = 0.8, list = F)
# including 80 for training set
churn_train.df <- churn.df[churn_split,]
# excluding 80 for testing set
churn_test.df <- churn.df[-churn_split,]
# validating
head(churn_test.df)
head(churn_train.df)
# create logistic regression model on train data
# R will automatically create dummy variables on factors
churn_train.logit <- glm(Churn ~ ., data = churn_train.df, family = binomial("logit") )
# create logistic regression model on train data
# R will automatically create dummy variables on factors
churn_train.logit <- glm(Churn ~ ., data = churn_train.df, family = binomial("logit") )
# create logistic regression model on train data
# R will automatically create dummy variables on factors
churn_train.logit <- glm(Churn ~ ., data = churn_train.df, family = binomial("logit") )
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse) # data wrangling
library(modelr) # factor manipulation
library(skimr) # data exploration
library(ggplot2) #visualization
library(corrplot) # visualisation
library(VIM) # missing values
#library(rsample)
#library(vip)
library(car) # modeling
library(glmnet) # logistic regression
library(caret) # CV
library(ROCR) # model validation
library(MASS) # model validation
library(randomForest) # modeling Random Forest
library(e1071) # modeling Random Forest tuning
# dataframe
churn.df <- read.csv('https://raw.githubusercontent.com/jotsap/DS7331/master/data/churn.csv')
str(churn.df)
